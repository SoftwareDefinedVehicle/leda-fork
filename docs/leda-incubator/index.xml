<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Eclipse Leda Documentation â€“ Incubator</title>
    <link>https://eclipse-leda.github.io/leda/docs/leda-incubator/</link>
    <description>Recent content in Incubator on Eclipse Leda Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 09 May 2022 14:24:56 +0530</lastBuildDate>
    
	  <atom:link href="https://eclipse-leda.github.io/leda/docs/leda-incubator/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Cloud Connector</title>
      <link>https://eclipse-leda.github.io/leda/docs/leda-incubator/cloud-connector/</link>
      <pubDate>Mon, 09 May 2022 14:24:56 +0530</pubDate>
      
      <guid>https://eclipse-leda.github.io/leda/docs/leda-incubator/cloud-connector/</guid>
      <description>
        
        
        &lt;p&gt;The cloud connector is used in the context of &lt;a href=&#34;https://eclipse-leda.github.io/leda/leda/docs/device-provisioning/&#34;&gt;Device Provisioning&lt;/a&gt; and cloud backend connectivity.&lt;/p&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;Leda Cloud Connector for Azure IoT Hub is a fork (extended and adapted) of the generic &lt;a href=&#34;https://github.com/eclipse-kanto/azure-connector&#34;&gt;Eclipse Kanto&amp;rsquo;s Azure connector&lt;/a&gt; that is being able to process cloud-to-device and device-to-cloud messages as defined for the Software-Defined Vehicle cloud backend.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./cloud-connector-fork.png&#34; alt=&#34;Cloud Connector Fork Relationship&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;runtime&#34;&gt;Runtime&lt;/h2&gt;
&lt;p&gt;The SDV cloud connector will come up with pluggable architecture that will allow easy &lt;strong&gt;transformation of the incoming cloud-to-device command messages (SDV message envelope) to a format suitable and understandable by the rest of the in-vehicle components&lt;/strong&gt; and vice-versa. It shall be possible to map SDV messages to and from &lt;a href=&#34;https://www.eclipse.org/hono/docs/concepts/connecting-devices/&#34;&gt;Eclipse Hono&lt;/a&gt; and &lt;a href=&#34;https://www.eclipse.org/ditto/&#34;&gt;Eclipse Ditto&lt;/a&gt; messages using simple configuration, rules written in JSON; thus allowing this component to work together with other &lt;a href=&#34;https://websites.eclipseprojects.io/kanto/&#34;&gt;Eclipse Kanto&lt;/a&gt; components too.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./cloud-connector-runtime.png&#34; alt=&#34;Cloud Connector Runtime View&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;source-repository&#34;&gt;Source Repository&lt;/h2&gt;
&lt;p&gt;Source Repository: &lt;a href=&#34;https://github.com/eclipse-leda/leda-contrib-cloud-connector&#34;&gt;https://github.com/eclipse-leda/leda-contrib-cloud-connector&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Self Update Agent</title>
      <link>https://eclipse-leda.github.io/leda/docs/leda-incubator/self-update-agent/</link>
      <pubDate>Mon, 09 May 2022 14:24:56 +0530</pubDate>
      
      <guid>https://eclipse-leda.github.io/leda/docs/leda-incubator/self-update-agent/</guid>
      <description>
        
        
        &lt;p&gt;The self update agent is used in the context of &lt;a href=&#34;https://eclipse-leda.github.io/leda/leda/docs/device-provisioning/self-update/&#34;&gt;OTA Self Updates&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;The Self Update Agent (SUA) as part of the &lt;a href=&#34;https://projects.eclipse.org/projects/automotive.leda.ledaincubator/reviews/creation-review&#34;&gt;Eclipse Leda Incubator project proposal&lt;/a&gt; is a software component responsible for &lt;strong&gt;performing updates of system-level components of the connectivity device&lt;/strong&gt;, such as&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Boot Loader&lt;/li&gt;
&lt;li&gt;Operating System&lt;/li&gt;
&lt;li&gt;Device Firmware&lt;/li&gt;
&lt;li&gt;Hardware Drivers&lt;/li&gt;
&lt;li&gt;&amp;hellip; other parts of the system, which cannot be deployed as containerized packages or may require a reboot of the device.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./self-update-agent-arch.png&#34; alt=&#34;Self Update Agent Scope&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;implementation-and-deployment&#34;&gt;Implementation and Deployment&lt;/h2&gt;
&lt;p&gt;SUA is using the RAUC framework via D-Bus calls, but it is designed in a way that switching to other updating solution shall be possible. SUA may be controlled by an external higher-level orchestration component via defined MQTT messages, which carry necessary for update data, such as version and URL of the update bundle. Update process feedback and the end result are also communicated via defined MQTT messages. Software Update Agent is implemented in C++ and configured to be running inside of a container.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./self-update-agent-deploy.png&#34; alt=&#34;Self Update Agent Runtime Deployment Diagram&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;source-repository&#34;&gt;Source Repository&lt;/h2&gt;
&lt;p&gt;Source Repository: &lt;a href=&#34;https://github.com/eclipse-leda/leda-contrib-self-update-agent&#34;&gt;https://github.com/eclipse-leda/leda-contrib-self-update-agent&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Vehicle Update Manager</title>
      <link>https://eclipse-leda.github.io/leda/docs/leda-incubator/vehicle-update-manager/</link>
      <pubDate>Mon, 09 May 2022 14:24:56 +0530</pubDate>
      
      <guid>https://eclipse-leda.github.io/leda/docs/leda-incubator/vehicle-update-manager/</guid>
      <description>
        
        
        &lt;p&gt;The vehicle update manager is used in the context of &lt;a href=&#34;https://eclipse-leda.github.io/leda/leda/docs/device-provisioning/vehicle-update-manager&#34;&gt;OTA Software Updates&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;Vehicle Update Manager (VUM) is an extended version of the &lt;a href=&#34;https://github.com/eclipse-kanto/container-management&#34;&gt;Eclipse Kanto Container Manager&lt;/a&gt; that is being able to &lt;strong&gt;handle new desired state for the software on the whole vehicle device&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./vehicle-update-manager-arch.png&#34; alt=&#34;Vehicle Update Manager Scope&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;
&lt;p&gt;The desired state comes as a multi document YAML content and it includes a list of Kubernetes resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deployments&lt;/li&gt;
&lt;li&gt;Pods&lt;/li&gt;
&lt;li&gt;Services&lt;/li&gt;
&lt;li&gt;ConfigMaps&lt;/li&gt;
&lt;li&gt;Custom Resources
&lt;ul&gt;
&lt;li&gt;System-Level Updates&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;VUM detects the system-level update custom resource and passes it for further processing to the &lt;a href=&#34;https://eclipse-leda.github.io/leda/leda/docs/leda-incubator/self-update-agent/&#34;&gt;Self Update Agent&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The remaining resources are &lt;strong&gt;forwarded to a Kubernetes-compatible control plane&lt;/strong&gt; and handled like the well-known kubectl command - creating new resources, updating existing ones or deleting old ones that are no longer present in the desired state manifest.&lt;/p&gt;
&lt;p&gt;VUM also monitors the self-update agent and the control plane, and compiles and report the current state of the device, again as a list of Kubernetes resources.&lt;/p&gt;
&lt;h2 id=&#34;source-repository&#34;&gt;Source Repository&lt;/h2&gt;
&lt;p&gt;Source Repository: &lt;a href=&#34;https://github.com/eclipse-leda/leda-contrib-vehicle-update-manager&#34;&gt;https://github.com/eclipse-leda/leda-contrib-vehicle-update-manager&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
